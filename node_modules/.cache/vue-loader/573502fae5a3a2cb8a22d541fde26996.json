{"remainingRequest":"C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\src\\pages\\teacher\\task-crud\\TeacherTask.vue?vue&type=template&id=7c51f79d&scoped=true&","dependencies":[{"path":"C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\src\\pages\\teacher\\task-crud\\TeacherTask.vue","mtime":1604217662000},{"path":"C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1602893211453},{"path":"C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1602893217884},{"path":"C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1602893211453},{"path":"C:\\Users\\Alexey\\Desktop\\ЛЦТ\\kk\\hacaton-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1602893217884}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}